# coding: utf-8

"""
    Pose Transform

    API server for PoseTransformGAN  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ttakamura@preferred.jp
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PuppetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_puppet(self, puppet_image, **kwargs):  # noqa: E501
        """Create new Puppet model  # noqa: E501

        Before render an image, you should upload a source image as a Puppet template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_puppet(puppet_image, async=True)
        >>> result = thread.get()

        :param async bool
        :param file puppet_image: The source image file, JPEG or PNG. (required)
        :return: Puppet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_puppet_with_http_info(puppet_image, **kwargs)  # noqa: E501
        else:
            (data) = self.create_puppet_with_http_info(puppet_image, **kwargs)  # noqa: E501
            return data

    def create_puppet_with_http_info(self, puppet_image, **kwargs):  # noqa: E501
        """Create new Puppet model  # noqa: E501

        Before render an image, you should upload a source image as a Puppet template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_puppet_with_http_info(puppet_image, async=True)
        >>> result = thread.get()

        :param async bool
        :param file puppet_image: The source image file, JPEG or PNG. (required)
        :return: Puppet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['puppet_image']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_puppet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'puppet_image' is set
        if ('puppet_image' not in params or
                params['puppet_image'] is None):
            raise ValueError("Missing the required parameter `puppet_image` when calling `create_puppet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'puppet_image' in params:
            local_var_files['puppetImage'] = params['puppet_image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/puppet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Puppet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def draw(self, puppet_id, pose, **kwargs):  # noqa: E501
        """Draw new image based on the Puppet and input pose  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.draw(puppet_id, pose, async=True)
        >>> result = thread.get()

        :param async bool
        :param str puppet_id: ID of the Puppet (required)
        :param Pose pose: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.draw_with_http_info(puppet_id, pose, **kwargs)  # noqa: E501
        else:
            (data) = self.draw_with_http_info(puppet_id, pose, **kwargs)  # noqa: E501
            return data

    def draw_with_http_info(self, puppet_id, pose, **kwargs):  # noqa: E501
        """Draw new image based on the Puppet and input pose  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.draw_with_http_info(puppet_id, pose, async=True)
        >>> result = thread.get()

        :param async bool
        :param str puppet_id: ID of the Puppet (required)
        :param Pose pose: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['puppet_id', 'pose']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method draw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'puppet_id' is set
        if ('puppet_id' not in params or
                params['puppet_id'] is None):
            raise ValueError("Missing the required parameter `puppet_id` when calling `draw`")  # noqa: E501
        # verify the required parameter 'pose' is set
        if ('pose' not in params or
                params['pose'] is None):
            raise ValueError("Missing the required parameter `pose` when calling `draw`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'puppet_id' in params:
            path_params['puppetId'] = params['puppet_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pose' in params:
            body_params = params['pose']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/puppet/{puppetId}/draw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def estimate_pose(self, puppet_id, pose_image, **kwargs):  # noqa: E501
        """Estimate the pose from input image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.estimate_pose(puppet_id, pose_image, async=True)
        >>> result = thread.get()

        :param async bool
        :param str puppet_id: ID of the Puppet (required)
        :param file pose_image: The target pose image file, JPEG or PNG. (required)
        :return: Crowd
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.estimate_pose_with_http_info(puppet_id, pose_image, **kwargs)  # noqa: E501
        else:
            (data) = self.estimate_pose_with_http_info(puppet_id, pose_image, **kwargs)  # noqa: E501
            return data

    def estimate_pose_with_http_info(self, puppet_id, pose_image, **kwargs):  # noqa: E501
        """Estimate the pose from input image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.estimate_pose_with_http_info(puppet_id, pose_image, async=True)
        >>> result = thread.get()

        :param async bool
        :param str puppet_id: ID of the Puppet (required)
        :param file pose_image: The target pose image file, JPEG or PNG. (required)
        :return: Crowd
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['puppet_id', 'pose_image']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method estimate_pose" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'puppet_id' is set
        if ('puppet_id' not in params or
                params['puppet_id'] is None):
            raise ValueError("Missing the required parameter `puppet_id` when calling `estimate_pose`")  # noqa: E501
        # verify the required parameter 'pose_image' is set
        if ('pose_image' not in params or
                params['pose_image'] is None):
            raise ValueError("Missing the required parameter `pose_image` when calling `estimate_pose`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'puppet_id' in params:
            path_params['puppetId'] = params['puppet_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'pose_image' in params:
            local_var_files['poseImage'] = params['pose_image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/puppet/{puppetId}/estimate_pose', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Crowd',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
